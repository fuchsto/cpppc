---
format: Markdown
title: Assignment 3: Iterators, Function Templates
categories: cpppc, teaching
...

**C++ Programming Course, Winter Term 2016**

# 3-0: Prerequisites

## SFINAE, enable_if



# 3-1: Designing Function Templates

Your implementations should be a combination of functions provided by the STL
and must not contain explicit loops like `for` or `while`.

You may use any algorithm interface defined in the C++11 standard.
For example, you may use `std::minmax` (C++11) in your implementations, but not
`std::for_each_n` (C++17).

References:

- [C++ Algorithm Library](http://en.cppreference.com/w/cpp/algorithm)


## find_mean_rep

Implement a function template `cpppc::find_mean_rep` which accepts a range specified
by two iterators in the `InputIterator` category and returns an iterator to the
element in the range that is closest to the mean of the range.

**Function interface:**

~~~c++
template <typename InputIter>
InputIter find_mean_rep(InputIter first, InputIter last);
~~~

**Example:**

~~~c++
std::vector<int> v { 1, 2, 3, 30, 40, 50 }; // mean: 21
auto closest_to_mean_it = cpppc::find_mean_rep(v.begin(), v.end());
// -> iterator at index 3 (|21-30| = 9)
~~~

## cluster

Implement a function template `cpppc::cluster` which accepts a range specified
by two iterators in the `RandomAccessIterator` category and an arbitrary number
of predicates (functions that return `true` or `false` depending on a single value).

~~~c++
template<typename RAIter, typename Predicate>
std::vector<std::pair<RAIter>>
cluster(RAIter first, RAIter last, Predicate p0, ...);
~~~

**Example:**

~~~c++
auto clusters             = cpppc::cluster(v.begin(), v.end(), is_odd, is_prime);
auto cluster_odd_first    = clusters[0];
auto cluster_prime_first  = clusters[1];

std::for_each(cluster_odd_first, cluster_prime_first,
              [](int v) { cout << v << " "; });
cout << endl;
~~~

# 3-2: Custom Iterators



# 3-X: List Comprehension

